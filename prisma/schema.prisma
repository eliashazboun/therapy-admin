// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Practice {
  id          String @id @default(uuid())
  name        String
  userId      String
  workingDays Int[]  @default([1, 2, 3, 4, 5])

  clients      Client[]      @relation("PracticeToClient")
  appointments Appointment[] @relation("PracticeToAppointment")
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Appointment {
  id         String   @id
  startTime  DateTime
  endTime    DateTime
  isAllDay   Boolean  @default(false)
  client     Client   @relation("ClientToAppointment", fields: [clientId], references: [id])
  clientName String
  clientId   String
  notes      String
  isPaid     Boolean  @default(false)
  practice   Practice @relation("PracticeToAppointment", fields: [practiceId], references: [id])
  practiceId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Client {
  id                String             @id @default(uuid())
  firstName         String
  lastName          String
  gender            String?
  birthday          DateTime?
  phone             String?
  city              String?
  email             String
  country           String?
  prefferedLanguage String?
  profilePicture    String?
  allergies         String[]
  disorders         Disorders[]        @relation("ClientToDisorder")
  medications       Medication[]       @relation("ClientToMedication")
  contacts          EmergencyContact[] @relation("ClientToEmergencyContact")
  practice          Practice?           @relation("PracticeToClient", fields: [practiceId], references: [id])
  appointments      Appointment[]      @relation("ClientToAppointment")
  notifications     Notification[]     @relation("ClientToNotification")
  practiceId        String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model Disorders {
  id        String @id @default(uuid())
  icd9cm    String
  icd10cm   String
  condition String

  clients Client[] @relation("ClientToDisorder")
}

model Notification {
  id        String   @id @default(uuid())
  title     String
  body      String
  client    Client   @relation("ClientToNotification", fields: [clientId], references: [id])
  clientId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Medication {
  id        String   @id @default(uuid())
  name      String
  dosage    String
  frequency String
  client    Client   @relation("ClientToMedication", fields: [clientId], references: [id])
  clientId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model EmergencyContact {
  id           String   @id @default(uuid())
  name         String
  phone        String
  email        String
  relationship String
  client       Client   @relation("ClientToEmergencyContact", fields: [clientId], references: [id])
  clientId     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}
